@page "/lineups"
@rendermode InteractiveServer
@inject ILineupService LineupService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization
@using ShowTime_BusinessLogic.Abstractions
@using ShowTime_BusinessLogic.Dtos
@attribute [Authorize(Roles="Administrator")]

<h2 class="lineup-title">🌟 All Festival Lineups 🌟</h2>
<p class="lineup-subtitle">From dusk till dawn, here’s who’s lighting up the stages 🎤🎧🎶</p>
<div class="lineup-decor-icons">
    <span>🎉</span>
    <span>🎪</span>
    <span>🎆</span>
    <span>🎸</span>
    <span>🎭</span>
</div>

<div class="lineup-grid">
    <div class="lineup-card add-new-card" @onclick="NavigateToAddLineup">
        <div class="add-icon">+</div>
        <p>Add Lineup</p>
    </div>

    @foreach (var lineup in PagedLineups)
    {
        <div class="lineup-card decorated-lineup">
            <div class="lineup-actions">
                <button class="edit-btn" @onclick="() => EditLineup(lineup.ArtistId, lineup.FestivalId)">
                    <i class="fa-solid fa-pen"></i>
                </button>
                <button class="delete-btn" @onclick="() => DeleteLineup(lineup.ArtistId, lineup.FestivalId)">
                    <i class="fa-solid fa-trash"></i>
                </button>
            </div>

            <div class="card-top-icons">
                <span>🎤</span>
                <span>✨</span>
                <span>🎵</span>
            </div>

            <h3>🎶 @lineup.ArtistName</h3>
            <p><strong>🎪 Festival:</strong> <span class="festival-name">@lineup.FestivalName</span></p>
            <p><strong>🗺️ Stage:</strong> <span class="stage-name">@lineup.Stage</span></p>
            <p><strong>⏱️ Start Time:</strong> @lineup.StartTime.ToString("g")</p>
            <div class="card-footer-decor">
                <span>🔊</span><span>🎇</span><span>🥁</span>
            </div>
        </div>
    }
</div>

<div class="pagination">
    @for (int i = 1; i <= TotalPages; i++)
    {
        <button class="page-btn @(CurrentPage == i ? "active" : "")" @onclick="() => ChangePage(i)">@i</button>
    }
</div>

@code {
    private List<LineupGetDto> AllLineups = new();
    private List<LineupGetDto> PagedLineups => AllLineups.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();

    private int CurrentPage = 1;
    private int PageSize = 8;
    private int TotalPages => (int)Math.Ceiling((double)AllLineups.Count / PageSize);

    protected override async Task OnInitializedAsync()
    {
        AllLineups = (await LineupService.GetAllAsync()).ToList();
    }

    private void ChangePage(int page) => CurrentPage = page;

    private void NavigateToAddLineup() => NavManager.NavigateTo("/addlineup");

    private void EditLineup(int artistId, int festivalId)
    {
        NavManager.NavigateTo($"/edit/lineup/{artistId}/{festivalId}");
    }

    private async Task DeleteLineup(int artistId, int festivalId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this lineup?");
        if (confirmed)
        {
            await LineupService.DeleteAsync(artistId, festivalId);
            AllLineups = (await LineupService.GetAllAsync()).ToList();
            ChangePage(CurrentPage);
        }
    }
}