@page "/lineups"
<!-- NOTE: For a combined festival preview and lineup, visit /festival/{id} -->
@rendermode InteractiveServer
@inject ILineupService LineupService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization
@using ShowTime_BusinessLogic.Abstractions
@using ShowTime_BusinessLogic.Dtos
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>ShowTime - Lineups</PageTitle>

<div class="lineups-page">
    <!-- Festival Decorations -->
    <div class="festival-decoration">
        @for (int i = 0; i < 18; i++)
        {
            <div class="sparkle" style="left: @(Random.Shared.Next(0, 100))%; top: @(Random.Shared.Next(0, 100))%; animation-delay: @(Random.Shared.Next(0, 4000))ms;"></div>
        }

        @for (int i = 0; i < 10; i++)
        {
            <div class="floating-element music-note" style="left: @(Random.Shared.Next(5, 95))%; animation-delay: @(Random.Shared.Next(0, 12000))ms;">♪</div>
        }

        @for (int i = 0; i < 6; i++)
        {
            <div class="soft-glow" style="left: @(Random.Shared.Next(10, 90))%; top: @(Random.Shared.Next(20, 80))%; animation-delay: @(Random.Shared.Next(0, 8000))ms;"></div>
        }
    </div>

    <div class="page-header">
        <h1 class="page-title neon-text">🎭 Festival Lineups 🎭</h1>
        <p class="page-subtitle">From dusk till dawn, here's who's lighting up the stages</p>

        <div class="animated-icons">
            <span>🎤</span> <span>🎧</span> <span>🎶</span> <span>🎸</span> <span>🎹</span> <span>🎺</span>
        </div>
    </div>

    @if (PagedLineups.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-icon">🎭</div>
            <h3>No Lineups Yet</h3>
            <p>Start creating amazing performance schedules!</p>
        </div>
    }

    <div class="lineups-container">
        <AuthorizeView Roles="Administrator">
                  <Authorized Context ="authContext"> 
                      <div class="add-lineup-card" @onclick="NavigateToAddLineup">
                        <div class="add-icon">+</div>
                        <h3>Add New Lineup</h3>
                        <p>Schedule amazing performances</p>
                      </div>
                  </Authorized>
        </AuthorizeView>

        @if (PagedLineups.Count > 0)
        {
            @foreach (var lineup in PagedLineups)
            {
                <div class="lineup-card">
                  <AuthorizeView Roles="Administrator">
                        <Authorized Context ="authContext"> 
                            <div class="lineup-actions">
                                <button class="action-btn edit-btn" @onclick="() => EditLineup(lineup.FestivalId, lineup.ArtistId)" title="Edit Lineup">
                                    <i class="fa-solid fa-pen"></i>
                                </button>
                                <button class="action-btn delete-btn" @onclick="() => DeleteLineup(lineup.FestivalId, lineup.ArtistId)" title="Delete Lineup">
                                    <i class="fa-solid fa-trash"></i>
                                </button>
                            </div>
                        </Authorized>
                   </AuthorizeView>

                    <div class="lineup-header">
                        <div class="artist-icon">🎤</div>
                        <h3 class="artist-name">@lineup.ArtistName</h3>
                    </div>

                    <div class="lineup-details">
                        <div class="detail-item">
                            <span class="detail-icon">🎪</span>
                            <span class="detail-label">Festival:</span>
                            <span class="detail-value">@lineup.FestivalName</span>
                        </div>

                        <div class="detail-item">
                            <span class="detail-icon">🎭</span>
                            <span class="detail-label">Stage:</span>
                            <span class="detail-value">@lineup.Stage</span>
                        </div>

                        <div class="detail-item">
                            <span class="detail-icon">⏰</span>
                            <span class="detail-label">Start Time:</span>
                            <span class="detail-value">@lineup.StartTime.ToString("g")</span>
                        </div>

                        <!-- Enhanced Performance Features -->
                        <div class="performance-features">
                            @if (lineup.IsMainStage)
                            {
                                <span class="feature-badge main-stage">
                                    <i class="fas fa-fire"></i> Main Stage
                                </span>
                            }
                            @if (lineup.IsLivePerformance)
                            {
                                <span class="feature-badge live-performance">
                                    <i class="fas fa-music"></i> Live Performance
                                </span>
                            }
                        </div>

                        <!-- Enhanced Description -->
                        @if (!string.IsNullOrWhiteSpace(lineup.Description))
                        {
                            <div class="lineup-description">
                                <div class="description-header">
                                    <i class="fas fa-info-circle"></i>
                                    <span>Performance Notes</span>
                                </div>
                                <p class="description-text">@lineup.Description</p>
                            </div>
                        }

                        <!-- Enhanced Stage Theme -->
                        @if (!string.IsNullOrWhiteSpace(lineup.StageTheme))
                        {
                            <div class="stage-theme">
                                <div class="theme-header">
                                    <i class="fas fa-palette"></i>
                                    <span>Stage Theme</span>
                                </div>
                                <div class="theme-badge">@lineup.StageTheme</div>
                            </div>
                        }
                    </div>

                    <div class="lineup-footer">
                        @if (lineup.IsMainStage)
                        {
                            <span class="performance-badge">🌟 Main Stage</span>
                        }

                        @if (lineup.IsLivePerformance)
                        {
                            <span class="performance-badge">🎸 Live Show</span>
                        }

                        @if (!string.IsNullOrWhiteSpace(lineup.StageTheme))
                        {
                            <span class="performance-badge">🎨 Theme: @lineup.StageTheme</span>
                        }
                    </div>
                </div>
            }
        }
    </div>

    @if (TotalPages > 1)
    {
        <div class="pagination-container">
            <div class="pagination">
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <button class="page-btn @(CurrentPage == i ? "active" : "")" @onclick="() => ChangePage(i)">
                        @i
                    </button>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<LineupGetDto> AllLineups = new();
    private List<LineupGetDto> PagedLineups =>
        FilteredLineups.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    private List<LineupGetDto> FilteredLineups =>
        selectedFestivalId.HasValue ?
            AllLineups.Where(l => l.FestivalId == selectedFestivalId.Value).ToList() :
            AllLineups;
    private int? selectedFestivalId;
    private int CurrentPage = 1;
    private int PageSize = 8;
    private int TotalPages => (int)Math.Ceiling((double)FilteredLineups.Count / PageSize);

    protected override async Task OnInitializedAsync()
    {
        AllLineups = (await LineupService.GetAllAsync()).ToList();
        SetFestivalIdFromQuery();
    }

    private void SetFestivalIdFromQuery()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("festivalId", out var festivalIdStr))
        {
            if (int.TryParse(festivalIdStr, out int festivalId))
            {
                selectedFestivalId = festivalId;
            }
        }
    }

    private void ChangePage(int page) => CurrentPage = page;

    private void NavigateToAddLineup() => NavManager.NavigateTo("/addlineup");

    private void EditLineup(int artistId, int festivalId)
    {
        NavManager.NavigateTo($"/edit/lineup/{artistId}/{festivalId}");
    }

    private async Task DeleteLineup(int artistId, int festivalId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this lineup?");
        if (confirmed)
        {
            await LineupService.DeleteAsync(artistId, festivalId);
            AllLineups = (await LineupService.GetAllAsync()).ToList();
            ChangePage(CurrentPage);
        }
    }
}
