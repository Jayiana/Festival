@page "/profile"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using ShowTime_BusinessLogic.Services
@using ShowTime_BusinessLogic.Dtos
@using static ShowTime_BusinessLogic.Dtos.UserService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IUserService UserService
@rendermode InteractiveServer

<div class="profile-page festivals-page">
    <div class="festival-decoration">
        @for (int i = 0; i < 20; i++)
        {
            <div class="sparkle" style="left: @(Random.Shared.Next(0, 100))%; top: @(Random.Shared.Next(0, 100))%; animation-delay: @(Random.Shared.Next(0, 4000))ms;"></div>
        }
        @for (int i = 0; i < 8; i++)
        {
            <div class="floating-element star" style="left: @(Random.Shared.Next(5, 95))%; animation-delay: @(Random.Shared.Next(0, 15000))ms;">â˜…</div>
        }
        @for (int i = 0; i < 6; i++)
        {
            <div class="soft-glow" style="left: @(Random.Shared.Next(10, 90))%; top: @(Random.Shared.Next(20, 80))%; animation-delay: @(Random.Shared.Next(0, 8000))ms;"></div>
        }
    </div>
    <div class="profile-container">
        <div class="profile-sidebar">
            <button class="sidebar-btn" @onclick="GoToBookings">
                <i class="fas fa-ticket-alt"></i> My Bookings
            </button>
            <button class="sidebar-btn" @onclick="GoToAccommodations">
                <i class="fas fa-bed"></i> My Accommodations
            </button>
            <button class="sidebar-btn logout" @onclick="Logout">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </div>
        <div class="profile-main">
            <div class="profile-card festival-card" style="display:@(activeTab == "profile" ? "flex" : "none")">
                <div class="profile-photo-section">
                    @if (userProfile?.ProfilePictureData != null)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(userProfile.ProfilePictureData)" alt="Profile Photo" class="profile-photo" />
                    }
                    else
                    {
                        <img src="/images/default-profile.png" alt="Profile Photo" class="profile-photo" />
                    }
                    <div class="photo-upload-container">
                        <InputFile OnChange="OnPhotoChange" accept="image/*" class="photo-upload-input" />
                        <div class="upload-info">
                            <small>Click to upload photo (max 10MB)</small>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(uploadMessage))
                    {
                        <div class="upload-message @uploadMessageType">
                            @uploadMessage
                        </div>
                    }
                </div>
                <div class="profile-info">
                    <h2 class="profile-email">@userEmail</h2>
                    @if (!string.IsNullOrEmpty(userProfile?.FullName))
                    {
                        <h3 class="profile-name">@userProfile.FullName</h3>
                    }
                    <div class="profile-label">Festival Account</div>
                    
                    @if (!string.IsNullOrEmpty(userProfile?.Bio))
                    {
                        <div class="profile-bio">
                            <p>@userProfile.Bio</p>
                        </div>
                    }
                    
                    <div class="profile-details">
                        @if (!string.IsNullOrEmpty(userProfile?.PhoneNumber))
                        {
                            <div class="detail-item">
                                <i class="fas fa-phone"></i>
                                <span>@userProfile.PhoneNumber</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(userProfile?.Address))
                        {
                            <div class="detail-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>@userProfile.Address</span>
                            </div>
                        }
                        @if (userProfile?.DateOfBirth.HasValue == true)
                        {
                            <div class="detail-item">
                                <i class="fas fa-birthday-cake"></i>
                                <span>@userProfile.DateOfBirth.Value.ToShortDateString()</span>
                            </div>
                        }
                    </div>
                    
                    <div class="social-links">
                        @if (!string.IsNullOrEmpty(userProfile?.Instagram))
                        {
                            <a href="@userProfile.Instagram" target="_blank" class="social-link">
                                <i class="fab fa-instagram"></i>
                            </a>
                        }
                        @if (!string.IsNullOrEmpty(userProfile?.Facebook))
                        {
                            <a href="@userProfile.Facebook" target="_blank" class="social-link">
                                <i class="fab fa-facebook"></i>
                            </a>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Edit Profile Form -->
            <div class="edit-profile-section" style="display:@(isEditing ? "block" : "none")">
                <div class="edit-profile-card festival-card">
                    <h3>Edit Profile</h3>
                    <EditForm Model="editProfile" OnValidSubmit="SaveProfile">
                        <DataAnnotationsValidator />
                        
                        <div class="form-group">
                            <label>Full Name:</label>
                            <InputText @bind-Value="editProfile.FullName" class="form-control" />
                        </div>
                        
                        <div class="form-group">
                            <label>Phone Number:</label>
                            <InputText @bind-Value="editProfile.PhoneNumber" class="form-control" />
                        </div>
                        
                        <div class="form-group">
                            <label>Address:</label>
                            <InputText @bind-Value="editProfile.Address" class="form-control" />
                        </div>
                        
                        <div class="form-group">
                            <label>Date of Birth:</label>
                            <InputDate @bind-Value="editProfile.DateOfBirth" class="form-control" />
                        </div>
                        
                        <div class="form-group">
                            <label>Bio:</label>
                            <InputTextArea @bind-Value="editProfile.Bio" class="form-control" rows="3" />
                        </div>
                        
                        <div class="form-group">
                            <label>Instagram URL:</label>
                            <InputText @bind-Value="editProfile.Instagram" class="form-control" />
                        </div>
                        
                        <div class="form-group">
                            <label>Facebook URL:</label>
                            <InputText @bind-Value="editProfile.Facebook" class="form-control" />
                        </div>
                        
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
            
            <!-- Edit Profile Button -->
            <div class="edit-profile-btn" style="display:@(activeTab == "profile" && !isEditing ? "block" : "none")">
                <button class="btn btn-primary" @onclick="StartEdit">
                    <i class="fas fa-edit"></i> Edit Profile
                </button>
            </div>
            
            <div style="width:100%;" hidden="@(activeTab != "bookings")">
                <MyBookings />
            </div>
            <div style="width:100%;" hidden="@(activeTab != "accommodations")">
                <Pages.AccommodationPage.MyAccommodations />
            </div>
        </div>
    </div>
</div>

@code {
    private string? userEmail;
    private bool isAuthenticated = false;
    private string activeTab = "profile";
    private bool isEditing = false;
    private UserProfileDto? userProfile;
    private UserProfileDto editProfile = new();
    private int userId;
    private string uploadMessage = string.Empty;
    private string uploadMessageType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated == true;
        if (!isAuthenticated)
        {
            NavManager.NavigateTo("/login");
            return;
        }
        userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
        
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (int.TryParse(userIdClaim, out int id))
        {
            userId = id;
            await LoadUserProfile();
        }
    }

    private async Task LoadUserProfile()
    {
        userProfile = await UserService.GetUserProfileAsync(userId);
        if (userProfile != null)
        {
            editProfile = new UserProfileDto
            {
                Id = userProfile.Id,
                FullName = userProfile.FullName,
                Email = userProfile.Email,
                ProfilePictureData = userProfile.ProfilePictureData, 
                PhoneNumber = userProfile.PhoneNumber,
                Address = userProfile.Address,
                DateOfBirth = userProfile.DateOfBirth,
                Bio = userProfile.Bio,
                Instagram = userProfile.Instagram,
                Facebook = userProfile.Facebook
            };
        }
    }

    private async Task OnPhotoChange(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.FileCount == 0)
            {
                uploadMessage = "No file selected.";
                uploadMessageType = "error";
                return;
            }

            var file = e.File;

            if (file == null || file.Size == 0)
            {
                uploadMessage = "Invalid file.";
                uploadMessageType = "error";
                return;
            }

            if (!file.ContentType.StartsWith("image/"))
            {
                uploadMessage = "Invalid file type.";
                uploadMessageType = "error";
                return;
            }

            var buffer = new byte[file.Size];
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            await stream.ReadAsync(buffer);

            if (userProfile != null)
            {
                userProfile.ProfilePictureData = buffer;
                editProfile.ProfilePictureData = buffer;
                await SaveProfilePictureData(buffer);
            }

            uploadMessage = "Photo uploaded successfully!";
            uploadMessageType = "success";
        }
        catch (IOException ioEx)
        {
            uploadMessage = $"IO error: {ioEx.Message}";
            uploadMessageType = "error";
        }
        catch (UnauthorizedAccessException uaEx)
        {
            uploadMessage = $"Access error: {uaEx.Message}";
            uploadMessageType = "error";
        }
        catch (Exception ex)
        {
            uploadMessage = $"Unexpected error: {ex.Message}";
            uploadMessageType = "error";
        }
    }



    private async Task SaveProfilePictureData(byte[] buffer)
    {
        try
        {
            if (userProfile != null)
            {
                userProfile.ProfilePictureData = buffer;
                var success = await UserService.UpdateUserProfileAsync(userId, userProfile);
                if (success)
                {
                    await LoadUserProfile();
                }
            }
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error saving profile picture: {ex.Message}";
            uploadMessageType = "error";
        }
    }

    private void StartEdit()
    {
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;

        if (userProfile != null)
        {
            editProfile = new UserProfileDto
            {
                Id = userProfile.Id,
                FullName = userProfile.FullName,
                Email = userProfile.Email,
                ProfilePictureData = userProfile.ProfilePictureData, 
                PhoneNumber = userProfile.PhoneNumber,
                Address = userProfile.Address,
                DateOfBirth = userProfile.DateOfBirth,
                Bio = userProfile.Bio,
                Instagram = userProfile.Instagram,
                Facebook = userProfile.Facebook
            };
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            var success = await UserService.UpdateUserProfileAsync(userId, editProfile);
            if (success)
            {
                await LoadUserProfile();
                isEditing = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
        }
    }

    private void GoToBookings()
    {
        NavManager.NavigateTo("/my-bookings");
    }
    private void GoToAccommodations()
    {
        NavManager.NavigateTo("/my-accommodations");
    }

    private void Logout()
    {
        NavManager.NavigateTo("/logout", forceLoad: true);
    }

    private void SetTab(string tab)
    {
        activeTab = tab;
    }
} 