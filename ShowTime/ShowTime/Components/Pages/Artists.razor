@page "/Artists"
@using ShowTime.BusinessLogic
@using ShowTime_BusinessLogic.Abstractions
@using ShowTime_BusinessLogic.Dtos
@inject IArtistService ArtistService
@inject NavigationManager NavManager
@inject IJSRuntime JS


<div class="artists-page">
    <h2 class="section-title">Browse Artists</h2>

    @if (pagedArtists.Count == 0)
    {
        <p>No artists registered!</p>
    }
    else
    {
        <div class="artist-grid">
            @foreach (var artist in pagedArtists)
            {
                <div class="artist-card">
                    <div class="artist-actions">
                        <button class="edit-btn" @onclick="() => EditArtist(artist.Id)">
                            <i class="fa-solid fa-pen"></i>
                        </button>
                        <button class="delete-btn" @onclick="() => DeleteArtist(artist.Id)">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </div>

                    <img src="@artist.Image" alt="@artist.Name" />
                    <h5>@artist.Name</h5>
                    <p>@artist.Genre</p>
                </div>
            }
        </div>

        <div class="pagination">
            @for (int i = 1; i <= totalPages; i++)
            {
                <button class="page-btn @(currentPage == i ? "active" : "")" @onclick="() => ChangePage(i)">
                    @i
                </button>
            }
        </div>
    }
</div>

@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();
    private List<ArtistGetDto> pagedArtists = new();
    private int currentPage = 1;
    private int itemsPerPage = 16;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        artists = await ArtistService.GetAllAsync();
        totalPages = (int)Math.Ceiling(artists.Count / (double)itemsPerPage);
        UpdatePagedArtists();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePagedArtists();
    }

    private void UpdatePagedArtists()
    {
        pagedArtists = artists
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage)
            .ToList();
    }

    private void EditArtist(int id)
    {
        NavManager.NavigateTo($"/EditArtist/{id}");
    }

    private async Task DeleteArtist(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this artist?");
        if (confirmed)
        {
            await ArtistService.DeleteAsync(id);
            artists = await ArtistService.GetAllAsync();
            totalPages = (int)Math.Ceiling(artists.Count / (double)itemsPerPage);
            ChangePage(currentPage);
        }
    }

}
