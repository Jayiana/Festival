@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer

<nav class="festival-navbar">
    <div class="logo">
        <img src="/images/Showtime-logo.png" alt="ShowTime" />
    </div>

    <div class="nav-links">
        <a href="/" class="nav-link"><i class="fas fa-house"></i> Home</a>
        <a href="/artists" class="nav-link"><i class="fas fa-microphone"></i> Artists</a>
        <a href="/festivals" class="nav-link"><i class="fas fa-music"></i> Festivals</a>
        <AuthorizeView Roles="Administrator"><Authorized> <a href="/lineups" class="nav-link"><i class="fas fa-users"></i> Lineups</a></Authorized></AuthorizeView>
        <a href="/accommodation" class="nav-link"><i class="fas fa-bed"></i> Accommodation</a>

        <input type="text" placeholder="Search artists/festivals..." class="search-bar" />
    </div>

    <div class="user-profile">
        <div class="profile-circle" @onclick="OnProfileClick" data-tooltip="@(isAuthenticated ? "User Profile" : "Click to Login")">
            <img src="/images/default-profile.png" alt="User Profile" class="profile-image" />
            <div class="profile-overlay">
                <i class="fas fa-user"></i>
            </div>
            @if (!isAuthenticated)
            {
                <div class="login-indicator">
                    <i class="fas fa-sign-in-alt"></i>
                </div>
            }
        </div>
    </div>
    
    <!-- Navbar Decorations -->
    <div class="navbar-decoration">
        <div class="nav-sparkle" style="left: 10%; animation-delay: 0s;"></div>
        <div class="nav-sparkle" style="right: 15%; animation-delay: 2s;"></div>
        <div class="nav-sparkle" style="left: 50%; animation-delay: 4s;"></div>
    </div>
</nav>

@code {
    private bool isAuthenticated = false;
    private string? userEmail;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated == true;

        if (isAuthenticated)
        {
            userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
        }
    }

    private void OnProfileClick()
    {
        if (!isAuthenticated)
        {
            NavManager.NavigateTo("/login");
        }
        else
        {
            NavManager.NavigateTo("/profile");
        }
    }
}

<style>
</style>

