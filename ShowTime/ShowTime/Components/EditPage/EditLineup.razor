@page "/edit/lineup/{festivalId:int}/{artistId:int}"
@using ShowTime_BusinessLogic.Abstractions
@using ShowTime_BusinessLogic.Dtos
@inject ILineupService LineupService
@inject NavigationManager NavManager
@rendermode InteractiveServer

<div class="edit-page festival-edit-bg">
    <div class="festival-decoration">
        <div class="sparkle"></div>
        <div class="music-note">🎸</div>
        <div class="star">★</div>
        <div class="heart">💜</div>
        <div class="triangle"></div>
        <div class="circle"></div>
    </div>
    <div class="edit-form-container">
        <div class="image-preview">
            <div class="lineup-preview">
                <div class="preview-header">
                    <h3>🎪 Lineup Preview</h3>
                    <div class="preview-badges">
                        <span class="preview-badge">🎤 @lineup.Stage</span>
                        <span class="preview-badge">⏰ @lineup.StartTime.ToString("HH:mm")</span>
                    </div>
                </div>
                <div class="preview-details">
                    <div class="preview-item">
                        <span class="preview-icon">🎪</span>
                        <span class="preview-label">Stage:</span>
                        <span class="preview-value">@lineup.Stage</span>
                    </div>
                    <div class="preview-item">
                        <span class="preview-icon">⏰</span>
                        <span class="preview-label">Time:</span>
                        <span class="preview-value">@lineup.StartTime.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    <div class="preview-item">
                        <span class="preview-icon">🔥</span>
                        <span class="preview-label">Main Stage:</span>
                        <span class="preview-value">@(lineup.IsMainStage ? "Yes" : "No")</span>
                    </div>
                    <div class="preview-item">
                        <span class="preview-icon">🎸</span>
                        <span class="preview-label">Live Performance:</span>
                        <span class="preview-value">@(lineup.IsLivePerformance ? "Yes" : "No")</span>
                    </div>
                    @if (!string.IsNullOrEmpty(lineup.StageTheme))
                    {
                        <div class="preview-item">
                            <span class="preview-icon">🎨</span>
                            <span class="preview-label">Theme:</span>
                            <span class="preview-value">@lineup.StageTheme</span>
                        </div>
                    }
                </div>
                <div class="preview-footer">
                    <span>🎵</span><span>🎤</span><span>🎸</span>
                </div>
            </div>
        </div>
        <div class="edit-form-section">
            <div class="form-header">
                <h2><span class="icon">🎸</span> Edit Lineup <span class="icon">🎶</span></h2>
            </div>
            <EditForm Model="@lineup" OnValidSubmit="SubmitLineup" FormName="EditLineupForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label><span class="label-icon">🎤</span> Stage:</label>
                <InputText @bind-Value="lineup.Stage" class="form-control" />
                <label><span class="label-icon">⏰</span> Start Time:</label>
                <input type="datetime-local" @bind="lineup.StartTime" class="form-control" />
                <label><span class="label-icon">⏰</span> End Time:</label>
                <input type="datetime-local" @bind="lineup.EndTime" class="form-control" />
                <label><span class="label-icon">🔥</span> Is Main Stage:</label>
                <InputCheckbox @bind-Value="lineup.IsMainStage" />
                <label><span class="label-icon">🎸</span> Is Live Performance:</label>
                <InputCheckbox @bind-Value="lineup.IsLivePerformance" />
                <label><span class="label-icon">📝</span> Description:</label>
                <InputTextArea @bind-Value="lineup.Description" class="form-control" rows="4" />
                <label><span class="label-icon">🎨</span> Stage Theme:</label>
                <InputText @bind-Value="lineup.StageTheme" class="form-control" />
                <div class="form-tags">
                    <span class="tag">🎸 Lineup</span>
                    <span class="tag">🎶 Performance</span>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        <span class="error-icon">⚠️</span>
                        @errorMessage
                    </div>
                }
                <button type="submit" class="btn-submit festival-btn">Save Changes</button>
            </EditForm>
        </div>
    </div>
    <div class="bottom-decoration">
        <span>🎵</span><span>🎤</span><span>🎸</span>
    </div>
</div>

@code {
    [Parameter] public int festivalId { get; set; }
    [Parameter] public int artistId { get; set; }

    private LineupUpdateDto lineup = new();
    private bool notFound = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var existing = await LineupService.GetAsync(festivalId, artistId);
            if (existing == null)
            {
                notFound = true;
                return;
            }

            lineup.Stage = existing.Stage;
            lineup.StartTime = existing.StartTime;
            lineup.EndTime = existing.EndTime;
            lineup.IsMainStage = existing.IsMainStage;
            lineup.IsLivePerformance = existing.IsLivePerformance;
            lineup.Description = existing.Description;
            lineup.StageTheme = existing.StageTheme;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[EditLineup ERROR] {ex.Message}");
            notFound = true;
        }
    }

    private async Task SubmitLineup()
    {
        try
        {
            Console.WriteLine($"[EditLineup] Submitting lineup for Festival ID: {festivalId}, Artist ID: {artistId}");
            Console.WriteLine($"[EditLineup] Lineup data: Stage={lineup.Stage}, StartTime={lineup.StartTime}");
            
            await LineupService.UpdateAsync(festivalId, artistId, lineup);
            Console.WriteLine($"[EditLineup] Update successful, navigating to /lineups");
            NavManager.NavigateTo("/lineups");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[EditLineup ERROR] {ex.Message}");
            errorMessage = ex.Message;
            StateHasChanged();
        }
    }
}

