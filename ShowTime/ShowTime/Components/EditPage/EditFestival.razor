@page "/edit/festival/{id:int}"
@using ShowTime_BusinessLogic.Abstractions
@using ShowTime_BusinessLogic.Dtos.Festival
@inject IFestivalService FestivalService
@inject NavigationManager NavManager

<div class="edit-page">
    <div class="edit-form-container">
        <div class="image-preview">
            @if (!string.IsNullOrEmpty(festival.SplashArt))
            {
                <img src="@festival.SplashArt" alt="Preview" />
            }
            else
            {
                <p>Paste an image link to preview</p>
            }
        </div>

        <div class="edit-form-section">
            <h2>Edit Festival</h2>
            <EditForm Model="@festival" OnValidSubmit="SubmitFestival" FormName="EditFestivalForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Name:</label>
                <InputText @bind-Value="festival.Name" class="form-control" />

                <label>Location:</label>
                <InputText @bind-Value="festival.Location" class="form-control" />

                <label>Start Date:</label>
                <InputDate @bind-Value="festival.StartDate" class="form-control" />

                <label>End Date:</label>
                <InputDate @bind-Value="festival.EndDate" class="form-control" />

                <label>Capacity:</label>
                <InputNumber @bind-Value="festival.Capacity" class="form-control" />

                <label>SplashArt URL:</label>
                <InputText @bind-Value="festival.SplashArt" class="form-control" />

                <button type="submit" class="btn-submit">Save Changes</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public int id { get; set; }
    private FestivalUpdateDto festival = new();

    protected override async Task OnInitializedAsync()
    {
        var existing = await FestivalService.GetByIdAsync(id);
        festival.Name = existing.Name;
        festival.Location = existing.Location;
        festival.StartDate = existing.StartDate;
        festival.EndDate = existing.EndDate;
        festival.Capacity = existing.Capacity;
        festival.SplashArt = existing.SplashArt;
    }

    private async Task SubmitFestival()
    {
        await FestivalService.UpdateAsync(id, festival);
        NavManager.NavigateTo("/festivals");
    }
}
